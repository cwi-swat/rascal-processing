[
{"category": "Structure", "name": "() (parentheses)", "syntax": "<pre>\nfunction()\nfunction(p1, ..., pN)\nstructure(expression)\n</pre>", "params": ["function", "p1, ..., pN", "structure", "expressions"]},
{"category": "Structure", "name": "true", "syntax": "<pre>\nfunction()\nfunction(p1, ..., pN)\nstructure(expression)\n</pre>", "params": ["function", "p1, ..., pN", "structure", "expressions"]},
{"category": "Structure", "name": "thread()", "syntax": "<pre>thread(<kbd>name</kbd>)</pre>", "params": ["name"]},
{"category": "Environment", "name": "focused", "syntax": "<pre>thread(<kbd>name</kbd>)</pre>", "params": ["name"]},
{"category": "Structure", "name": "try", "syntax": "<pre>\ntry {\n  tryStatements\n} catch (exception) {\n  catchStatements\n} \n</pre>", "params": ["tryStatements", "exception", "catchStatements"]},
{"category": "Environment", "name": "delay()", "syntax": "<pre>delay(<kbd>napTime</kbd>)</pre>", "params": ["napTime"]},
{"category": "Environment", "name": "displayDensity()", "syntax": "<pre>displayDensity()\ndisplayDensity(<kbd>display</kbd>)</pre>", "params": ["display"]},
{"category": "Environment", "name": "frameCount", "syntax": "<pre>displayDensity()\ndisplayDensity(<kbd>display</kbd>)</pre>", "params": ["display"]},
{"category": "Structure", "name": "this", "syntax": "<pre>displayDensity()\ndisplayDensity(<kbd>display</kbd>)</pre>", "params": ["display"]},
{"category": "Environment", "name": "cursor()", "syntax": "<pre>cursor(<kbd>kind</kbd>)\ncursor(<kbd>img</kbd>)\ncursor(<kbd>img</kbd>, <kbd>x</kbd>, <kbd>y</kbd>)\ncursor()</pre>", "params": ["kind", "img", "x", "y"]},
{"category": "Structure", "name": "void", "syntax": "<pre>\nvoid function {\n  statements\n}\n</pre>", "params": ["function", "statements"]},
{"category": "Structure", "name": "super", "syntax": "<pre>\nvoid function {\n  statements\n}\n</pre>", "params": ["function", "statements"]},
{"category": "Structure", "name": "setTitle()", "syntax": "<pre>\nsurface.setTitle(title)\n</pre>", "params": ["title"]},
{"category": "Structure", "name": "static", "syntax": "<pre>\nsurface.setTitle(title)\n</pre>", "params": ["title"]},
{"category": "Rendering", "name": "createGraphics()", "syntax": "<pre>createGraphics(<kbd>w</kbd>, <kbd>h</kbd>)\ncreateGraphics(<kbd>w</kbd>, <kbd>h</kbd>, <kbd>renderer</kbd>)\ncreateGraphics(<kbd>w</kbd>, <kbd>h</kbd>, <kbd>renderer</kbd>, <kbd>path</kbd>)</pre>", "params": ["w", "h", "renderer", "path"]},
{"category": "Constants", "name": "TWO_PI", "syntax": "<pre>createGraphics(<kbd>w</kbd>, <kbd>h</kbd>)\ncreateGraphics(<kbd>w</kbd>, <kbd>h</kbd>, <kbd>renderer</kbd>)\ncreateGraphics(<kbd>w</kbd>, <kbd>h</kbd>, <kbd>renderer</kbd>, <kbd>path</kbd>)</pre>", "params": ["w", "h", "renderer", "path"]},
{"category": "Structure", "name": "setup()", "syntax": "<pre>setup()</pre>", "params": ["w", "h", "renderer", "path"]},
{"category": "Structure", "name": "setResizable()", "syntax": "<pre>\nsurface.setResizable(resizable)\n</pre>", "params": ["resizable"]},
{"category": "Constants", "name": "TAU", "syntax": "<pre>\nsurface.setResizable(resizable)\n</pre>", "params": ["resizable"]},
{"category": "Constants", "name": "QUARTER_PI", "syntax": "<pre>\nsurface.setResizable(resizable)\n</pre>", "params": ["resizable"]},
{"category": "Constants", "name": "PI", "syntax": "<pre>\nsurface.setResizable(resizable)\n</pre>", "params": ["resizable"]},
{"category": "Constants", "name": "HALF_PI", "syntax": "<pre>\nsurface.setResizable(resizable)\n</pre>", "params": ["resizable"]},
{"category": "Math", "name": "noiseSeed()", "syntax": "<pre>noiseSeed(<kbd>seed</kbd>)</pre>", "params": ["seed"]},
{"category": "Math", "name": "randomSeed()", "syntax": "<pre>randomSeed(<kbd>seed</kbd>)</pre>", "params": ["seed"]},
{"category": "Math", "name": "randomGaussian()", "syntax": "<pre>randomGaussian()</pre>", "params": ["seed"]},
{"category": "Math", "name": "noiseDetail()", "syntax": "<pre>noiseDetail(<kbd>lod</kbd>)\nnoiseDetail(<kbd>lod</kbd>, <kbd>falloff</kbd>)</pre>", "params": ["lod", "falloff"]},
{"category": "Math", "name": "random()", "syntax": "<pre>random(<kbd>high</kbd>)\nrandom(<kbd>low</kbd>, <kbd>high</kbd>)</pre>", "params": ["low", "high"]},
{"category": "Math", "name": "noise()", "syntax": "<pre>noise(<kbd>x</kbd>)\nnoise(<kbd>x</kbd>, <kbd>y</kbd>)\nnoise(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Math", "name": "tan()", "syntax": "<pre>tan(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Math", "name": "sin()", "syntax": "<pre>sin(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Math", "name": "radians()", "syntax": "<pre>radians(<kbd>degrees</kbd>)</pre>", "params": ["degrees"]},
{"category": "Math", "name": "degrees()", "syntax": "<pre>degrees(<kbd>radians</kbd>)</pre>", "params": ["radians"]},
{"category": "Math", "name": "cos()", "syntax": "<pre>cos(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Math", "name": "atan2()", "syntax": "<pre>atan2(<kbd>y</kbd>, <kbd>x</kbd>)</pre>", "params": ["y", "x"]},
{"category": "Math", "name": "atan()", "syntax": "<pre>atan(<kbd>value</kbd>)</pre>", "params": ["value"]},
{"category": "Math", "name": "asin()", "syntax": "<pre>asin(<kbd>value</kbd>)</pre>", "params": ["value"]},
{"category": "Math", "name": "acos()", "syntax": "<pre>acos(<kbd>value</kbd>)</pre>", "params": ["value"]},
{"category": "Math", "name": "max()", "syntax": "<pre>max(<kbd>a</kbd>, <kbd>b</kbd>)\nmax(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>)\nmax(<kbd>list</kbd>)</pre>", "params": ["a", "b", "c", "list"]},
{"category": "Math", "name": "sqrt()", "syntax": "<pre>sqrt(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "sq()", "syntax": "<pre>sq(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "round()", "syntax": "<pre>round(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "pow()", "syntax": "<pre>pow(<kbd>n</kbd>, <kbd>e</kbd>)</pre>", "params": ["n", "e"]},
{"category": "Math", "name": "norm()", "syntax": "<pre>norm(<kbd>value</kbd>, <kbd>start</kbd>, <kbd>stop</kbd>)</pre>", "params": ["value", "start", "stop"]},
{"category": "Math", "name": "min()", "syntax": "<pre>min(<kbd>a</kbd>, <kbd>b</kbd>)\nmin(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>)\nmin(<kbd>list</kbd>)</pre>", "params": ["a", "b", "c", "list"]},
{"category": "Math", "name": "map()", "syntax": "<pre>map(<kbd>value</kbd>, <kbd>start1</kbd>, <kbd>stop1</kbd>, <kbd>start2</kbd>, <kbd>stop2</kbd>)</pre>", "params": ["value", "start1", "stop1", "start2", "stop2"]},
{"category": "Math", "name": "mag()", "syntax": "<pre>mag(<kbd>a</kbd>, <kbd>b</kbd>)\nmag(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>)</pre>", "params": ["a", "b", "c"]},
{"category": "Math", "name": "log()", "syntax": "<pre>log(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "lerp()", "syntax": "<pre>lerp(<kbd>start</kbd>, <kbd>stop</kbd>, <kbd>amt</kbd>)</pre>", "params": ["start", "stop", "amt"]},
{"category": "Math", "name": "floor()", "syntax": "<pre>floor(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "exp()", "syntax": "<pre>exp(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "dist()", "syntax": "<pre>dist(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>)\ndist(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>z1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>z2</kbd>)</pre>", "params": ["x1", "y1", "z1", "x2", "y2", "z2"]},
{"category": "Math", "name": "constrain()", "syntax": "<pre>constrain(<kbd>amt</kbd>, <kbd>low</kbd>, <kbd>high</kbd>)</pre>", "params": ["amt", "low", "high"]},
{"category": "Math", "name": "ceil()", "syntax": "<pre>ceil(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "abs()", "syntax": "<pre>abs(<kbd>n</kbd>)</pre>", "params": ["n"]},
{"category": "Math", "name": "-= (subtract assign)", "syntax": "<pre>\nvalue1 -= value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "| (bitwise OR)", "syntax": "<pre>\nvalue | value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "& (bitwise AND)", "syntax": "<pre>value &amp; value2</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "/ (divide)", "syntax": "<pre>\nvalue1 / value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": ">> (right shift)", "syntax": "<pre>\nvalue &gt;&gt; n\n</pre>", "params": ["value", "n"]},
{"category": "Math", "name": "<< (left shift)", "syntax": "<pre>\nvalue &lt;&lt; n\n</pre>", "params": ["value", "n"]},
{"category": "Math", "name": "/= (divide assign)", "syntax": "<pre>\nvalue1 /= value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "-- (decrement)", "syntax": "<pre>\nvar--\n</pre>", "params": ["var"]},
{"category": "Math", "name": "+= (add assign)", "syntax": "<pre>\nvalue1 += value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "++ (increment)", "syntax": "<pre>\nvalue++\n</pre>", "params": ["value"]},
{"category": "Math", "name": "- (minus)", "syntax": "<pre>\n-value1\nvalue1 - value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "*= (multiply assign)", "syntax": "<pre>\nvalue1 *= value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "* (multiply)", "syntax": "<pre>\nvalue1 * value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "% (modulo)", "syntax": "<pre>\nvalue1 % value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "+ (addition)", "syntax": "<pre>\nvalue1 + value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Math", "name": "PVector", "syntax": "<pre>\nvalue1 + value2\n</pre>", "params": ["x", "y", "z"]},
{"category": "Typography", "name": "textAscent()", "syntax": "<pre>textAscent()</pre>", "params": ["x", "y", "z"]},
{"category": "Typography", "name": "textWidth()", "syntax": "<pre>textWidth(<kbd>c</kbd>)\ntextWidth(<kbd>str</kbd>)</pre>", "params": ["c", "str"]},
{"category": "Typography", "name": "textDescent()", "syntax": "<pre>textDescent()</pre>", "params": ["c", "str"]},
{"category": "Typography", "name": "textSize()", "syntax": "<pre>textSize(<kbd>size</kbd>)</pre>", "params": ["size"]},
{"category": "Typography", "name": "textMode()", "syntax": "<pre>textMode(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Typography", "name": "textLeading()", "syntax": "<pre>textLeading(<kbd>leading</kbd>)</pre>", "params": ["leading"]},
{"category": "Typography", "name": "textAlign()", "syntax": "<pre>textAlign(<kbd>alignX</kbd>)\ntextAlign(<kbd>alignX</kbd>, <kbd>alignY</kbd>)</pre>", "params": ["alignX", "alignY"]},
{"category": "Typography", "name": "textFont()", "syntax": "<pre>textFont(<kbd>which</kbd>)\ntextFont(<kbd>which</kbd>, <kbd>size</kbd>)</pre>", "params": ["which", "size"]},
{"category": "Typography", "name": "loadFont()", "syntax": "<pre>loadFont(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Typography", "name": "text()", "syntax": "<pre>text(<kbd>c</kbd>, <kbd>x</kbd>, <kbd>y</kbd>)\ntext(<kbd>c</kbd>, <kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)\ntext(<kbd>str</kbd>, <kbd>x</kbd>, <kbd>y</kbd>)\ntext(<kbd>chars</kbd>, <kbd>start</kbd>, <kbd>stop</kbd>, <kbd>x</kbd>, <kbd>y</kbd>)\ntext(<kbd>str</kbd>, <kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)\ntext(<kbd>chars</kbd>, <kbd>start</kbd>, <kbd>stop</kbd>, <kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)\ntext(<kbd>str</kbd>, <kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>)\ntext(<kbd>num</kbd>, <kbd>x</kbd>, <kbd>y</kbd>)\ntext(<kbd>num</kbd>, <kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["c", "x", "y", "z", "chars", "start", "stop", "x1", "y1", "x2", "y2", "num"]},
{"category": "Typography", "name": "createFont()", "syntax": "<pre>createFont(<kbd>name</kbd>, <kbd>size</kbd>)\ncreateFont(<kbd>name</kbd>, <kbd>size</kbd>, <kbd>smooth</kbd>)\ncreateFont(<kbd>name</kbd>, <kbd>size</kbd>, <kbd>smooth</kbd>, <kbd>charset</kbd>)</pre>", "params": ["name", "size", "smooth", "charset"]},
{"category": "Typography", "name": "PFont", "syntax": "<pre>createFont(<kbd>name</kbd>, <kbd>size</kbd>)\ncreateFont(<kbd>name</kbd>, <kbd>size</kbd>, <kbd>smooth</kbd>)\ncreateFont(<kbd>name</kbd>, <kbd>size</kbd>, <kbd>smooth</kbd>, <kbd>charset</kbd>)</pre>", "params": ["name", "size", "smooth", "charset"]},
{"category": "Rendering", "name": "shader()", "syntax": "<pre>shader(<kbd>shader</kbd>)\nshader(<kbd>shader</kbd>, <kbd>kind</kbd>)</pre>", "params": ["shader", "kind"]},
{"category": "Rendering", "name": "loadShader()", "syntax": "<pre>loadShader(<kbd>fragFilename</kbd>)\nloadShader(<kbd>fragFilename</kbd>, <kbd>vertFilename</kbd>)</pre>", "params": ["fragFilename", "vertFilename"]},
{"category": "Rendering", "name": "resetShader()", "syntax": "<pre>resetShader()\nresetShader(<kbd>kind</kbd>)</pre>", "params": ["kind"]},
{"category": "Rendering", "name": "PShader", "syntax": "<pre>resetShader()\nresetShader(<kbd>kind</kbd>)</pre>", "params": ["parent", "vertFilename", "fragFilename", "vertURL", "fragURL"]},
{"category": "Rendering", "name": "PGraphics", "syntax": "<pre>resetShader()\nresetShader(<kbd>kind</kbd>)</pre>", "params": ["parent", "vertFilename", "fragFilename", "vertURL", "fragURL"]},
{"category": "Rendering", "name": "hint()", "syntax": "<pre>\nhint(which)\n</pre>", "params": ["which"]},
{"category": "Rendering", "name": "blendMode()", "syntax": "<pre>blendMode(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Rendering", "name": "noClip()", "syntax": "<pre>noClip()</pre>", "params": ["mode"]},
{"category": "Image", "name": "updatePixels()", "syntax": "<pre>updatePixels()</pre>", "params": ["mode"]},
{"category": "Rendering", "name": "clip()", "syntax": "<pre>clip(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>)</pre>", "params": ["a", "b", "c", "d"]},
{"category": "Image", "name": "set()", "syntax": "<pre>set(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>c</kbd>)\nset(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>img</kbd>)</pre>", "params": ["x", "y", "c", "img"]},
{"category": "Image", "name": "pixels[]", "syntax": "<pre>set(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>c</kbd>)\nset(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>img</kbd>)</pre>", "params": ["x", "y", "c", "img"]},
{"category": "Image", "name": "loadPixels()", "syntax": "<pre>loadPixels()</pre>", "params": ["x", "y", "c", "img"]},
{"category": "Image", "name": "blend()", "syntax": "<pre>blend(<kbd>sx</kbd>, <kbd>sy</kbd>, <kbd>sw</kbd>, <kbd>sh</kbd>, <kbd>dx</kbd>, <kbd>dy</kbd>, <kbd>dw</kbd>, <kbd>dh</kbd>, <kbd>mode</kbd>)\nblend(<kbd>src</kbd>, <kbd>sx</kbd>, <kbd>sy</kbd>, <kbd>sw</kbd>, <kbd>sh</kbd>, <kbd>dx</kbd>, <kbd>dy</kbd>, <kbd>dw</kbd>, <kbd>dh</kbd>, <kbd>mode</kbd>)</pre>", "params": ["src", "sx", "sy", "sw", "sh", "dx", "dy", "dw", "dh", "mode"]},
{"category": "Image", "name": "get()", "syntax": "<pre>get(<kbd>x</kbd>, <kbd>y</kbd>)\nget(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>w</kbd>, <kbd>h</kbd>)\nget()</pre>", "params": ["x", "y", "w", "h"]},
{"category": "Image", "name": "textureWrap()", "syntax": "<pre>textureWrap(<kbd>wrap</kbd>)</pre>", "params": ["wrap"]},
{"category": "Image", "name": "filter()", "syntax": "<pre>filter(<kbd>shader</kbd>)\nfilter(<kbd>kind</kbd>)\nfilter(<kbd>kind</kbd>, <kbd>param</kbd>)</pre>", "params": ["shader", "kind", "param"]},
{"category": "Image", "name": "copy()", "syntax": "<pre>copy()\ncopy(<kbd>sx</kbd>, <kbd>sy</kbd>, <kbd>sw</kbd>, <kbd>sh</kbd>, <kbd>dx</kbd>, <kbd>dy</kbd>, <kbd>dw</kbd>, <kbd>dh</kbd>)\ncopy(<kbd>src</kbd>, <kbd>sx</kbd>, <kbd>sy</kbd>, <kbd>sw</kbd>, <kbd>sh</kbd>, <kbd>dx</kbd>, <kbd>dy</kbd>, <kbd>dw</kbd>, <kbd>dh</kbd>)</pre>", "params": ["sx", "sy", "sw", "sh", "dx", "dy", "dw", "dh", "src"]},
{"category": "Image", "name": "textureMode()", "syntax": "<pre>textureMode(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Image", "name": "texture()", "syntax": "<pre>texture(<kbd>image</kbd>)</pre>", "params": ["image"]},
{"category": "Image", "name": "tint()", "syntax": "<pre>tint(<kbd>rgb</kbd>)\ntint(<kbd>rgb</kbd>, <kbd>alpha</kbd>)\ntint(<kbd>gray</kbd>)\ntint(<kbd>gray</kbd>, <kbd>alpha</kbd>)\ntint(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)\ntint(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>alpha</kbd>)</pre>", "params": ["rgb", "alpha", "gray", "v1", "v2", "v3"]},
{"category": "Image", "name": "requestImage()", "syntax": "<pre>requestImage(<kbd>filename</kbd>)\nrequestImage(<kbd>filename</kbd>, <kbd>extension</kbd>)</pre>", "params": ["filename", "extension"]},
{"category": "Image", "name": "noTint()", "syntax": "<pre>noTint()</pre>", "params": ["filename", "extension"]},
{"category": "Image", "name": "imageMode()", "syntax": "<pre>imageMode(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Image", "name": "image()", "syntax": "<pre>image(<kbd>img</kbd>, <kbd>a</kbd>, <kbd>b</kbd>)\nimage(<kbd>img</kbd>, <kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>)</pre>", "params": ["img", "a", "b", "c", "d"]},
{"category": "Image", "name": "createImage()", "syntax": "<pre>createImage(<kbd>w</kbd>, <kbd>h</kbd>, <kbd>format</kbd>)</pre>", "params": ["w", "h", "format"]},
{"category": "Color", "name": "saturation()", "syntax": "<pre>saturation(<kbd>rgb</kbd>)</pre>", "params": ["rgb"]},
{"category": "Image", "name": "loadImage()", "syntax": "<pre>loadImage(<kbd>filename</kbd>)\nloadImage(<kbd>filename</kbd>, <kbd>extension</kbd>)</pre>", "params": ["filename", "extension"]},
{"category": "Image", "name": "PImage", "syntax": "<pre>loadImage(<kbd>filename</kbd>)\nloadImage(<kbd>filename</kbd>, <kbd>extension</kbd>)</pre>", "params": ["filename", "extension"]},
{"category": "Color", "name": "red()", "syntax": "<pre>red(<kbd>rgb</kbd>)</pre>", "params": ["rgb"]},
{"category": "Color", "name": "green()", "syntax": "<pre>green(<kbd>rgb</kbd>)</pre>", "params": ["rgb"]},
{"category": "Color", "name": "color()", "syntax": "<pre>color(<kbd>gray</kbd>)\ncolor(<kbd>gray</kbd>, <kbd>alpha</kbd>)\ncolor(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)\ncolor(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>alpha</kbd>)</pre>", "params": ["gray", "alpha", "v1", "v2", "v3"]},
{"category": "Color", "name": "brightness()", "syntax": "<pre>brightness(<kbd>rgb</kbd>)</pre>", "params": ["rgb"]},
{"category": "Color", "name": "lerpColor()", "syntax": "<pre>lerpColor(<kbd>c1</kbd>, <kbd>c2</kbd>, <kbd>amt</kbd>)</pre>", "params": ["c1", "c2", "amt"]},
{"category": "Color", "name": "blue()", "syntax": "<pre>blue(<kbd>rgb</kbd>)</pre>", "params": ["rgb"]},
{"category": "Color", "name": "hue()", "syntax": "<pre>hue(<kbd>rgb</kbd>)</pre>", "params": ["rgb"]},
{"category": "Color", "name": "alpha()", "syntax": "<pre>alpha(<kbd>rgb</kbd>)</pre>", "params": ["rgb"]},
{"category": "Color", "name": "stroke()", "syntax": "<pre>stroke(<kbd>rgb</kbd>)\nstroke(<kbd>rgb</kbd>, <kbd>alpha</kbd>)\nstroke(<kbd>gray</kbd>)\nstroke(<kbd>gray</kbd>, <kbd>alpha</kbd>)\nstroke(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)\nstroke(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>alpha</kbd>)</pre>", "params": ["rgb", "alpha", "gray", "v1", "v2", "v3"]},
{"category": "Color", "name": "fill()", "syntax": "<pre>fill(<kbd>rgb</kbd>)\nfill(<kbd>rgb</kbd>, <kbd>alpha</kbd>)\nfill(<kbd>gray</kbd>)\nfill(<kbd>gray</kbd>, <kbd>alpha</kbd>)\nfill(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)\nfill(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>alpha</kbd>)</pre>", "params": ["rgb", "alpha", "gray", "v1", "v2", "v3"]},
{"category": "Color", "name": "colorMode()", "syntax": "<pre>colorMode(<kbd>mode</kbd>)\ncolorMode(<kbd>mode</kbd>, <kbd>max</kbd>)\ncolorMode(<kbd>mode</kbd>, <kbd>max1</kbd>, <kbd>max2</kbd>, <kbd>max3</kbd>)\ncolorMode(<kbd>mode</kbd>, <kbd>max1</kbd>, <kbd>max2</kbd>, <kbd>max3</kbd>, <kbd>maxA</kbd>)</pre>", "params": ["mode", "max", "max1", "max2", "max3", "maxA"]},
{"category": "Color", "name": "clear()", "syntax": "<pre>clear()</pre>", "params": ["mode", "max", "max1", "max2", "max3", "maxA"]},
{"category": "Color", "name": "background()", "syntax": "<pre>background(<kbd>rgb</kbd>)\nbackground(<kbd>rgb</kbd>, <kbd>alpha</kbd>)\nbackground(<kbd>gray</kbd>)\nbackground(<kbd>gray</kbd>, <kbd>alpha</kbd>)\nbackground(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)\nbackground(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>alpha</kbd>)\nbackground(<kbd>image</kbd>)</pre>", "params": ["rgb", "alpha", "gray", "v1", "v2", "v3", "image"]},
{"category": "Color", "name": "noStroke()", "syntax": "<pre>noStroke()</pre>", "params": ["rgb", "alpha", "gray", "v1", "v2", "v3", "image"]},
{"category": "Lights, Camera", "name": "specular()", "syntax": "<pre>specular(<kbd>rgb</kbd>)\nspecular(<kbd>gray</kbd>)\nspecular(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)</pre>", "params": ["rgb", "gray", "v1", "v2", "v3"]},
{"category": "Color", "name": "noFill()", "syntax": "<pre>noFill()</pre>", "params": ["rgb", "gray", "v1", "v2", "v3"]},
{"category": "Lights, Camera", "name": "shininess()", "syntax": "<pre>shininess(<kbd>shine</kbd>)</pre>", "params": ["shine"]},
{"category": "Lights, Camera", "name": "emissive()", "syntax": "<pre>emissive(<kbd>rgb</kbd>)\nemissive(<kbd>gray</kbd>)\nemissive(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)</pre>", "params": ["rgb", "gray", "v1", "v2", "v3"]},
{"category": "Lights, Camera", "name": "screenX()", "syntax": "<pre>screenX(<kbd>x</kbd>, <kbd>y</kbd>)\nscreenX(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Lights, Camera", "name": "ambient()", "syntax": "<pre>ambient(<kbd>rgb</kbd>)\nambient(<kbd>gray</kbd>)\nambient(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)</pre>", "params": ["rgb", "gray", "v1", "v2", "v3"]},
{"category": "Lights, Camera", "name": "screenZ()", "syntax": "<pre>screenZ(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Lights, Camera", "name": "screenY()", "syntax": "<pre>screenY(<kbd>x</kbd>, <kbd>y</kbd>)\nscreenY(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Lights, Camera", "name": "modelZ()", "syntax": "<pre>modelZ(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Lights, Camera", "name": "modelX()", "syntax": "<pre>modelX(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Lights, Camera", "name": "modelY()", "syntax": "<pre>modelY(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Lights, Camera", "name": "printProjection()", "syntax": "<pre>printProjection()</pre>", "params": ["x", "y", "z"]},
{"category": "Lights, Camera", "name": "perspective()", "syntax": "<pre>perspective()\nperspective(<kbd>fovy</kbd>, <kbd>aspect</kbd>, <kbd>zNear</kbd>, <kbd>zFar</kbd>)</pre>", "params": ["fovy", "aspect", "zNear", "zFar"]},
{"category": "Lights, Camera", "name": "ortho()", "syntax": "<pre>ortho()\northo(<kbd>left</kbd>, <kbd>right</kbd>, <kbd>bottom</kbd>, <kbd>top</kbd>)\northo(<kbd>left</kbd>, <kbd>right</kbd>, <kbd>bottom</kbd>, <kbd>top</kbd>, <kbd>near</kbd>, <kbd>far</kbd>)</pre>", "params": ["left", "right", "bottom", "top", "near", "far"]},
{"category": "Lights, Camera", "name": "frustum()", "syntax": "<pre>frustum(<kbd>left</kbd>, <kbd>right</kbd>, <kbd>bottom</kbd>, <kbd>top</kbd>, <kbd>near</kbd>, <kbd>far</kbd>)</pre>", "params": ["left", "right", "bottom", "top", "near", "far"]},
{"category": "Lights, Camera", "name": "camera()", "syntax": "<pre>camera()\ncamera(<kbd>eyeX</kbd>, <kbd>eyeY</kbd>, <kbd>eyeZ</kbd>, <kbd>centerX</kbd>, <kbd>centerY</kbd>, <kbd>centerZ</kbd>, <kbd>upX</kbd>, <kbd>upY</kbd>, <kbd>upZ</kbd>)</pre>", "params": ["eyeX", "eyeY", "eyeZ", "centerX", "centerY", "centerZ", "upX", "upY", "upZ"]},
{"category": "Lights, Camera", "name": "endCamera()", "syntax": "<pre>endCamera()</pre>", "params": ["eyeX", "eyeY", "eyeZ", "centerX", "centerY", "centerZ", "upX", "upY", "upZ"]},
{"category": "Lights, Camera", "name": "beginCamera()", "syntax": "<pre>beginCamera()</pre>", "params": ["eyeX", "eyeY", "eyeZ", "centerX", "centerY", "centerZ", "upX", "upY", "upZ"]},
{"category": "Lights, Camera", "name": "spotLight()", "syntax": "<pre>spotLight(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>, <kbd>nx</kbd>, <kbd>ny</kbd>, <kbd>nz</kbd>, <kbd>angle</kbd>, <kbd>concentration</kbd>)</pre>", "params": ["v1", "v2", "v3", "x", "y", "z", "nx", "ny", "nz", "angle", "concentration"]},
{"category": "Lights, Camera", "name": "printCamera()", "syntax": "<pre>printCamera()</pre>", "params": ["v1", "v2", "v3", "x", "y", "z", "nx", "ny", "nz", "angle", "concentration"]},
{"category": "Lights, Camera", "name": "pointLight()", "syntax": "<pre>pointLight(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["v1", "v2", "v3", "x", "y", "z"]},
{"category": "Lights, Camera", "name": "normal()", "syntax": "<pre>normal(<kbd>nx</kbd>, <kbd>ny</kbd>, <kbd>nz</kbd>)</pre>", "params": ["nx", "ny", "nz"]},
{"category": "Lights, Camera", "name": "noLights()", "syntax": "<pre>noLights()</pre>", "params": ["nx", "ny", "nz"]},
{"category": "Lights, Camera", "name": "lightSpecular()", "syntax": "<pre>lightSpecular(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)</pre>", "params": ["v1", "v2", "v3"]},
{"category": "Lights, Camera", "name": "lights()", "syntax": "<pre>lights()</pre>", "params": ["v1", "v2", "v3"]},
{"category": "Lights, Camera", "name": "lightFalloff()", "syntax": "<pre>lightFalloff(<kbd>constant</kbd>, <kbd>linear</kbd>, <kbd>quadratic</kbd>)</pre>", "params": ["constant", "linear", "quadratic"]},
{"category": "Lights, Camera", "name": "directionalLight()", "syntax": "<pre>directionalLight(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>nx</kbd>, <kbd>ny</kbd>, <kbd>nz</kbd>)</pre>", "params": ["v1", "v2", "v3", "nx", "ny", "nz"]},
{"category": "Transform", "name": "translate()", "syntax": "<pre>translate(<kbd>x</kbd>, <kbd>y</kbd>)\ntranslate(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Transform", "name": "shearY()", "syntax": "<pre>shearY(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Transform", "name": "shearX()", "syntax": "<pre>shearX(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Lights, Camera", "name": "ambientLight()", "syntax": "<pre>ambientLight(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>)\nambientLight(<kbd>v1</kbd>, <kbd>v2</kbd>, <kbd>v3</kbd>, <kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["v1", "v2", "v3", "x", "y", "z"]},
{"category": "Transform", "name": "scale()", "syntax": "<pre>scale(<kbd>s</kbd>)\nscale(<kbd>x</kbd>, <kbd>y</kbd>)\nscale(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["s", "x", "y", "z"]},
{"category": "Transform", "name": "rotateZ()", "syntax": "<pre>rotateZ(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Transform", "name": "rotateY()", "syntax": "<pre>rotateY(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Transform", "name": "rotateX()", "syntax": "<pre>rotateX(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Transform", "name": "popMatrix()", "syntax": "<pre>popMatrix()</pre>", "params": ["angle"]},
{"category": "Transform", "name": "rotate()", "syntax": "<pre>rotate(<kbd>angle</kbd>)</pre>", "params": ["angle"]},
{"category": "Transform", "name": "resetMatrix()", "syntax": "<pre>resetMatrix()</pre>", "params": ["angle"]},
{"category": "Transform", "name": "pushMatrix()", "syntax": "<pre>pushMatrix()</pre>", "params": ["angle"]},
{"category": "Transform", "name": "printMatrix()", "syntax": "<pre>printMatrix()</pre>", "params": ["angle"]},
{"category": "Transform", "name": "applyMatrix()", "syntax": "<pre>applyMatrix(<kbd>source</kbd>)\napplyMatrix(<kbd>n00</kbd>, <kbd>n01</kbd>, <kbd>n02</kbd>, <kbd>n10</kbd>, <kbd>n11</kbd>, <kbd>n12</kbd>)\napplyMatrix(<kbd>n00</kbd>, <kbd>n01</kbd>, <kbd>n02</kbd>, <kbd>n03</kbd>, <kbd>n10</kbd>, <kbd>n11</kbd>, <kbd>n12</kbd>, <kbd>n13</kbd>, <kbd>n20</kbd>, <kbd>n21</kbd>, <kbd>n22</kbd>, <kbd>n23</kbd>, <kbd>n30</kbd>, <kbd>n31</kbd>, <kbd>n32</kbd>, <kbd>n33</kbd>)</pre>", "params": ["n00", "n01", "n02", "n10", "n11", "n12", "n03", "n13", "n20", "n21", "n22", "n23", "n30", "n31", "n32", "n33"]},
{"category": "Output", "name": "selectOutput()", "syntax": "<pre>selectOutput(<kbd>prompt</kbd>, <kbd>callback</kbd>)\nselectOutput(<kbd>prompt</kbd>, <kbd>callback</kbd>, <kbd>file</kbd>)\nselectOutput(<kbd>prompt</kbd>, <kbd>callback</kbd>, <kbd>file</kbd>, <kbd>callbackObject</kbd>)\nselectOutput(<kbd>prompt</kbd>, <kbd>callbackMethod</kbd>, <kbd>file</kbd>, <kbd>callbackObject</kbd>, <kbd>parent</kbd>)\nselectOutput(<kbd>prompt</kbd>, <kbd>callbackMethod</kbd>, <kbd>file</kbd>, <kbd>callbackObject</kbd>, <kbd>parent</kbd>, <kbd>sketch</kbd>)</pre>", "params": ["prompt", "callback"]},
{"category": "Output", "name": "saveXML()", "syntax": "<pre>saveXML(<kbd>xml</kbd>, <kbd>filename</kbd>)</pre>", "params": ["xml", "filename"]},
{"category": "Output", "name": "saveTable()", "syntax": "<pre>saveTable(<kbd>table</kbd>, <kbd>filename</kbd>)\nsaveTable(<kbd>table</kbd>, <kbd>filename</kbd>, <kbd>options</kbd>)</pre>", "params": ["table", "filename", "options"]},
{"category": "Output", "name": "saveStrings()", "syntax": "<pre>saveStrings(<kbd>filename</kbd>, <kbd>data</kbd>)</pre>", "params": ["filename", "data"]},
{"category": "Output", "name": "saveStream()", "syntax": "<pre>saveStream(<kbd>target</kbd>, <kbd>source</kbd>)</pre>", "params": ["target", "source"]},
{"category": "Output", "name": "saveJSONObject()", "syntax": "<pre>saveJSONObject(<kbd>json</kbd>, <kbd>filename</kbd>)\nsaveJSONObject(<kbd>json</kbd>, <kbd>filename</kbd>, <kbd>options</kbd>)</pre>", "params": ["json", "filename", "options"]},
{"category": "Output", "name": "saveJSONArray()", "syntax": "<pre>saveJSONArray(<kbd>json</kbd>, <kbd>filename</kbd>)\nsaveJSONArray(<kbd>json</kbd>, <kbd>filename</kbd>, <kbd>options</kbd>)</pre>", "params": ["json", "filename", "options"]},
{"category": "Output", "name": "saveBytes()", "syntax": "<pre>saveBytes(<kbd>filename</kbd>, <kbd>data</kbd>)</pre>", "params": ["filename", "data"]},
{"category": "Output", "name": "PrintWriter", "syntax": "<pre>saveBytes(<kbd>filename</kbd>, <kbd>data</kbd>)</pre>", "params": ["filename", "data"]},
{"category": "Output", "name": "endRecord()", "syntax": "<pre>endRecord()</pre>", "params": ["filename", "data"]},
{"category": "Output", "name": "endRaw()", "syntax": "<pre>endRaw()</pre>", "params": ["filename", "data"]},
{"category": "Output", "name": "createWriter()", "syntax": "<pre>createWriter(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Output", "name": "beginRecord()", "syntax": "<pre>beginRecord(<kbd>renderer</kbd>, <kbd>filename</kbd>)</pre>", "params": ["renderer", "filename"]},
{"category": "Output", "name": "beginRaw()", "syntax": "<pre>beginRaw(<kbd>renderer</kbd>, <kbd>filename</kbd>)</pre>", "params": ["renderer", "filename"]},
{"category": "Output", "name": "println()", "syntax": "<pre>println()\nprintln(<kbd>what</kbd>)\nprintln(<kbd>variables</kbd>)</pre>", "params": ["what", "variables"]},
{"category": "Output", "name": "createOutput()", "syntax": "<pre>createOutput(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Output", "name": "saveFrame()", "syntax": "<pre>saveFrame()\nsaveFrame(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Output", "name": "save()", "syntax": "<pre>save(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Output", "name": "printArray()", "syntax": "<pre>printArray(<kbd>what</kbd>)</pre>", "params": ["what"]},
{"category": "Input", "name": "month()", "syntax": "<pre>month()</pre>", "params": ["what"]},
{"category": "Output", "name": "print()", "syntax": "<pre>print(<kbd>what</kbd>)\nprint(<kbd>variables</kbd>)</pre>", "params": ["what", "variables"]},
{"category": "Input", "name": "minute()", "syntax": "<pre>minute()</pre>", "params": ["what", "variables"]},
{"category": "Input", "name": "year()", "syntax": "<pre>year()</pre>", "params": ["what", "variables"]},
{"category": "Input", "name": "second()", "syntax": "<pre>second()</pre>", "params": ["what", "variables"]},
{"category": "Input", "name": "millis()", "syntax": "<pre>millis()</pre>", "params": ["what", "variables"]},
{"category": "Input", "name": "hour()", "syntax": "<pre>hour()</pre>", "params": ["what", "variables"]},
{"category": "Input", "name": "day()", "syntax": "<pre>day()</pre>", "params": ["what", "variables"]},
{"category": "Input", "name": "selectInput()", "syntax": "<pre>selectInput(<kbd>prompt</kbd>, <kbd>callback</kbd>)\nselectInput(<kbd>prompt</kbd>, <kbd>callback</kbd>, <kbd>file</kbd>)\nselectInput(<kbd>prompt</kbd>, <kbd>callback</kbd>, <kbd>file</kbd>, <kbd>callbackObject</kbd>)\nselectInput(<kbd>prompt</kbd>, <kbd>callbackMethod</kbd>, <kbd>file</kbd>, <kbd>callbackObject</kbd>, <kbd>parent</kbd>, <kbd>sketch</kbd>)\nselectInput(<kbd>prompt</kbd>, <kbd>callbackMethod</kbd>, <kbd>file</kbd>, <kbd>callbackObject</kbd>, <kbd>parent</kbd>)</pre>", "params": ["prompt", "callback"]},
{"category": "Input", "name": "selectFolder()", "syntax": "<pre>selectFolder(<kbd>prompt</kbd>, <kbd>callback</kbd>)\nselectFolder(<kbd>prompt</kbd>, <kbd>callback</kbd>, <kbd>file</kbd>)\nselectFolder(<kbd>prompt</kbd>, <kbd>callback</kbd>, <kbd>file</kbd>, <kbd>callbackObject</kbd>)\nselectFolder(<kbd>prompt</kbd>, <kbd>callbackMethod</kbd>, <kbd>defaultSelection</kbd>, <kbd>callbackObject</kbd>, <kbd>parentFrame</kbd>)\nselectFolder(<kbd>prompt</kbd>, <kbd>callbackMethod</kbd>, <kbd>defaultSelection</kbd>, <kbd>callbackObject</kbd>, <kbd>parentFrame</kbd>, <kbd>sketch</kbd>)</pre>", "params": ["prompt", "callback"]},
{"category": "Input", "name": "parseXML()", "syntax": "<pre>parseXML(<kbd>xmlString</kbd>)\nparseXML(<kbd>xmlString</kbd>, <kbd>options</kbd>)</pre>", "params": ["xmlString"]},
{"category": "Input", "name": "parseJSONObject()", "syntax": "<pre>parseJSONObject(<kbd>input</kbd>)</pre>", "params": ["input"]},
{"category": "Input", "name": "parseJSONArray()", "syntax": "<pre>parseJSONArray(<kbd>input</kbd>)</pre>", "params": ["input"]},
{"category": "Input", "name": "loadStrings()", "syntax": "<pre>loadStrings(<kbd>filename</kbd>)\nloadStrings(<kbd>reader</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "loadXML()", "syntax": "<pre>loadXML(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "loadTable()", "syntax": "<pre>loadTable(<kbd>filename</kbd>)\nloadTable(<kbd>filename</kbd>, <kbd>options</kbd>)</pre>", "params": ["filename", "options"]},
{"category": "Input", "name": "loadJSONObject()", "syntax": "<pre>loadJSONObject(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "loadJSONArray()", "syntax": "<pre>loadJSONArray(<kbd>filename</kbd>)\nloadJSONArray(<kbd>file</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "createReader()", "syntax": "<pre>createReader(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "createInput()", "syntax": "<pre>createInput(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "launch()", "syntax": "<pre>launch(<kbd>args</kbd>)</pre>", "params": ["args"]},
{"category": "Input", "name": "keyTyped()", "syntax": "<pre>keyTyped()\nkeyTyped(<kbd>event</kbd>)</pre>", "params": ["args"]},
{"category": "Input", "name": "loadBytes()", "syntax": "<pre>loadBytes(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "BufferedReader", "syntax": "<pre>loadBytes(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "keyReleased()", "syntax": "<pre>keyReleased()\nkeyReleased(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "keyPressed", "syntax": "<pre>keyReleased()\nkeyReleased(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "keyPressed()", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "keyCode", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "key", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "pmouseX", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "mouseY", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "pmouseY", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "mouseX", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "mousePressed", "syntax": "<pre>keyPressed()\nkeyPressed(<kbd>event</kbd>)</pre>", "params": ["filename"]},
{"category": "Input", "name": "mouseWheel()", "syntax": "<pre>mouseWheel(<kbd>event</kbd>)</pre>", "params": ["event"]},
{"category": "Input", "name": "mouseReleased()", "syntax": "<pre>mouseReleased()\nmouseReleased(<kbd>event</kbd>)</pre>", "params": ["event"]},
{"category": "Input", "name": "mousePressed()", "syntax": "<pre>mousePressed()\nmousePressed(<kbd>event</kbd>)</pre>", "params": ["event"]},
{"category": "Input", "name": "mouseClicked()", "syntax": "<pre>mouseClicked()\nmouseClicked(<kbd>event</kbd>)</pre>", "params": ["event"]},
{"category": "Input", "name": "mouseMoved()", "syntax": "<pre>mouseMoved()\nmouseMoved(<kbd>event</kbd>)</pre>", "params": ["event"]},
{"category": "Input", "name": "mouseDragged()", "syntax": "<pre>mouseDragged()\nmouseDragged(<kbd>event</kbd>)</pre>", "params": ["event"]},
{"category": "Input", "name": "mouseButton", "syntax": "<pre>mouseDragged()\nmouseDragged(<kbd>event</kbd>)</pre>", "params": ["event"]},
{"category": "Shape", "name": "shapeMode()", "syntax": "<pre>shapeMode(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Shape", "name": "shape()", "syntax": "<pre>shape(<kbd>shape</kbd>)\nshape(<kbd>shape</kbd>, <kbd>x</kbd>, <kbd>y</kbd>)\nshape(<kbd>shape</kbd>, <kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>)</pre>", "params": ["shape", "x", "y", "a", "b", "c", "d"]},
{"category": "Shape", "name": "vertex()", "syntax": "<pre>vertex(<kbd>x</kbd>, <kbd>y</kbd>)\nvertex(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)\nvertex(<kbd>v</kbd>)\nvertex(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>u</kbd>, <kbd>v</kbd>)\nvertex(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>, <kbd>u</kbd>, <kbd>v</kbd>)</pre>", "params": ["v", "x", "y", "z", "u", "v"]},
{"category": "Shape", "name": "quadraticVertex()", "syntax": "<pre>quadraticVertex(<kbd>cx</kbd>, <kbd>cy</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>)\nquadraticVertex(<kbd>cx</kbd>, <kbd>cy</kbd>, <kbd>cz</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>z3</kbd>)</pre>", "params": ["cx", "cy", "x3", "y3", "cz", "z3"]},
{"category": "Shape", "name": "endShape()", "syntax": "<pre>endShape()\nendShape(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Shape", "name": "endContour()", "syntax": "<pre>endContour()</pre>", "params": ["mode"]},
{"category": "Shape", "name": "curveVertex()", "syntax": "<pre>curveVertex(<kbd>x</kbd>, <kbd>y</kbd>)\ncurveVertex(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Shape", "name": "bezierVertex()", "syntax": "<pre>bezierVertex(<kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>x4</kbd>, <kbd>y4</kbd>)\nbezierVertex(<kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>z2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>z3</kbd>, <kbd>x4</kbd>, <kbd>y4</kbd>, <kbd>z4</kbd>)</pre>", "params": ["x2", "y2", "z2", "x3", "y3", "z3", "x4", "y4", "z4"]},
{"category": "Shape", "name": "beginShape()", "syntax": "<pre>beginShape()\nbeginShape(<kbd>kind</kbd>)</pre>", "params": ["kind"]},
{"category": "Shape", "name": "beginContour()", "syntax": "<pre>beginContour()</pre>", "params": ["kind"]},
{"category": "Shape", "name": "strokeWeight()", "syntax": "<pre>strokeWeight(<kbd>weight</kbd>)</pre>", "params": ["weight"]},
{"category": "Shape", "name": "strokeJoin()", "syntax": "<pre>strokeJoin(<kbd>join</kbd>)</pre>", "params": ["join"]},
{"category": "Shape", "name": "sphereDetail()", "syntax": "<pre>sphereDetail(<kbd>res</kbd>)\nsphereDetail(<kbd>ures</kbd>, <kbd>vres</kbd>)</pre>", "params": ["res", "ures", "vres"]},
{"category": "Shape", "name": "rectMode()", "syntax": "<pre>rectMode(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Shape", "name": "ellipseMode()", "syntax": "<pre>ellipseMode(<kbd>mode</kbd>)</pre>", "params": ["mode"]},
{"category": "Shape", "name": "strokeCap()", "syntax": "<pre>strokeCap(<kbd>cap</kbd>)</pre>", "params": ["cap"]},
{"category": "Shape", "name": "sphere()", "syntax": "<pre>sphere(<kbd>r</kbd>)</pre>", "params": ["r"]},
{"category": "Shape", "name": "box()", "syntax": "<pre>box(<kbd>size</kbd>)\nbox(<kbd>w</kbd>, <kbd>h</kbd>, <kbd>d</kbd>)</pre>", "params": ["size", "w", "h", "d"]},
{"category": "Shape", "name": "curveTightness()", "syntax": "<pre>curveTightness(<kbd>tightness</kbd>)</pre>", "params": ["tightness"]},
{"category": "Shape", "name": "curvePoint()", "syntax": "<pre>curvePoint(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>t</kbd>)</pre>", "params": ["a", "b", "c", "d", "t"]},
{"category": "Shape", "name": "curveTangent()", "syntax": "<pre>curveTangent(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>t</kbd>)</pre>", "params": ["a", "b", "c", "d", "t"]},
{"category": "Shape", "name": "curveDetail()", "syntax": "<pre>curveDetail(<kbd>detail</kbd>)</pre>", "params": ["detail"]},
{"category": "Shape", "name": "curve()", "syntax": "<pre>curve(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>x4</kbd>, <kbd>y4</kbd>)\ncurve(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>z1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>z2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>z3</kbd>, <kbd>x4</kbd>, <kbd>y4</kbd>, <kbd>z4</kbd>)</pre>", "params": ["x1", "y1", "x2", "y2", "x3", "y3", "x4", "y4", "z1", "z2", "z3", "z4"]},
{"category": "Shape", "name": "bezierTangent()", "syntax": "<pre>bezierTangent(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>t</kbd>)</pre>", "params": ["a", "b", "c", "d", "t"]},
{"category": "Shape", "name": "bezierDetail()", "syntax": "<pre>bezierDetail(<kbd>detail</kbd>)</pre>", "params": ["detail"]},
{"category": "Shape", "name": "bezier()", "syntax": "<pre>bezier(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>x4</kbd>, <kbd>y4</kbd>)\nbezier(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>z1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>z2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>z3</kbd>, <kbd>x4</kbd>, <kbd>y4</kbd>, <kbd>z4</kbd>)</pre>", "params": ["x1", "y1", "z1", "x2", "y2", "z2", "x3", "y3", "z3", "x4", "y4", "z4"]},
{"category": "Shape", "name": "bezierPoint()", "syntax": "<pre>bezierPoint(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>t</kbd>)</pre>", "params": ["a", "b", "c", "d", "t"]},
{"category": "Shape", "name": "square()", "syntax": "<pre>square(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>extent</kbd>)</pre>", "params": ["x", "y", "extent"]},
{"category": "Shape", "name": "triangle()", "syntax": "<pre>triangle(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>)</pre>", "params": ["x1", "y1", "x2", "y2", "x3", "y3"]},
{"category": "Shape", "name": "point()", "syntax": "<pre>point(<kbd>x</kbd>, <kbd>y</kbd>)\npoint(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>z</kbd>)</pre>", "params": ["x", "y", "z"]},
{"category": "Shape", "name": "rect()", "syntax": "<pre>rect(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>)\nrect(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>r</kbd>)\nrect(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>tl</kbd>, <kbd>tr</kbd>, <kbd>br</kbd>, <kbd>bl</kbd>)</pre>", "params": ["a", "b", "c", "d", "r", "tl", "tr", "br", "bl"]},
{"category": "Shape", "name": "quad()", "syntax": "<pre>quad(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>x3</kbd>, <kbd>y3</kbd>, <kbd>x4</kbd>, <kbd>y4</kbd>)</pre>", "params": ["x1", "y1", "x2", "y2", "x3", "y3", "x4", "y4"]},
{"category": "Shape", "name": "line()", "syntax": "<pre>line(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>)\nline(<kbd>x1</kbd>, <kbd>y1</kbd>, <kbd>z1</kbd>, <kbd>x2</kbd>, <kbd>y2</kbd>, <kbd>z2</kbd>)</pre>", "params": ["x1", "y1", "x2", "y2", "z1", "z2"]},
{"category": "Shape", "name": "ellipse()", "syntax": "<pre>ellipse(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>)</pre>", "params": ["a", "b", "c", "d"]},
{"category": "Shape", "name": "circle()", "syntax": "<pre>circle(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>extent</kbd>)</pre>", "params": ["x", "y", "extent"]},
{"category": "Shape", "name": "PShape", "syntax": "<pre>circle(<kbd>x</kbd>, <kbd>y</kbd>, <kbd>extent</kbd>)</pre>", "params": ["x", "y", "extent"]},
{"category": "Shape", "name": "arc()", "syntax": "<pre>arc(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>start</kbd>, <kbd>stop</kbd>)\narc(<kbd>a</kbd>, <kbd>b</kbd>, <kbd>c</kbd>, <kbd>d</kbd>, <kbd>start</kbd>, <kbd>stop</kbd>, <kbd>mode</kbd>)</pre>", "params": ["a", "b", "c", "d", "start", "stop"]},
{"category": "Shape", "name": "loadShape()", "syntax": "<pre>loadShape(<kbd>filename</kbd>)</pre>", "params": ["filename"]},
{"category": "Control", "name": "|| (logical OR)", "syntax": "<pre>\nexpression1 || expression2\n</pre>", "params": ["expression1", "expression2"]},
{"category": "Shape", "name": "createShape()", "syntax": "<pre>createShape()\ncreateShape(<kbd>type</kbd>)\ncreateShape(<kbd>kind</kbd>, <kbd>p</kbd>)</pre>", "params": ["kind", "p"]},
{"category": "Control", "name": "if", "syntax": "<pre>\nif (test) { \n  statements \n} \n</pre>", "params": ["test", "statements"]},
{"category": "Control", "name": "&& (logical AND)", "syntax": "<pre>\nexpression1 &amp;&amp; expression2\n</pre>", "params": ["expression1", "expression2"]},
{"category": "Control", "name": "else", "syntax": "<pre>\nif (expression) { \n  statements \n} else { \n  statements \n} \n\nif (expression) { \n  statements \n} else if (expression) { \n  statements \n} else { \n  statements \n}\n</pre>", "params": ["expression", "statements"]},
{"category": "Control", "name": "switch", "syntax": "<pre>\nswitch(expression)\n{\n  case label: \n     statements          \n  case label:          // Optional\n     statements        // \"\n  default:             // \"\n     statements        // \"\n}\n</pre>", "params": ["expression", "label", "statements"]},
{"category": "Control", "name": "! (logical NOT)", "syntax": "<pre>\n!expression\n</pre>", "params": ["expression"]},
{"category": "Control", "name": "default", "syntax": "<pre>\ndefault: statements\n</pre>", "params": ["statements"]},
{"category": "Control", "name": "case", "syntax": "<pre>\ncase label: statements\n</pre>", "params": ["label", "statements"]},
{"category": "Control", "name": "continue", "syntax": "<pre>\ncontinue\n</pre>", "params": ["label", "statements"]},
{"category": "Control", "name": "break", "syntax": "<pre>\ncontinue\n</pre>", "params": ["label", "statements"]},
{"category": "Control", "name": "for", "syntax": "<pre>\nfor (init; test; update) { \n  statements\n} \n\nfor (datatype element : array) { \n  statements\n}\n</pre>", "params": ["init", "test", "update", "statements", "datatype", "element", "array"]},
{"category": "Control", "name": "?: (conditional)", "syntax": "<pre>\ntest ? expression1 : expression2\n</pre>", "params": ["test", "expression1", "expression2"]},
{"category": "Control", "name": "while", "syntax": "<pre>\nwhile (expression) {\n  statements\n}\n</pre>", "params": ["expression", "statements"]},
{"category": "Control", "name": ">= (greater than or equal to)", "syntax": "<pre>\nvalue1 &gt;= value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Control", "name": "> (greater than)", "syntax": "<pre>\nvalue1 &gt; value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Control", "name": "== (equality)", "syntax": "<pre>\nvalue1 == value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Control", "name": "<= (less than or equal to)", "syntax": "<pre>\nvalue1 &lt;= value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Control", "name": "< (less than)", "syntax": "<pre>\nvalue1 &lt; value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Control", "name": "!= (inequality)", "syntax": "<pre>\nvalue1 != value2\n</pre>", "params": ["value1", "value2"]},
{"category": "Data", "name": "subset()", "syntax": "<pre>subset(<kbd>list</kbd>, <kbd>start</kbd>)\nsubset(<kbd>list</kbd>, <kbd>start</kbd>, <kbd>count</kbd>)</pre>", "params": ["list", "start", "count"]},
{"category": "Data", "name": "splice()", "syntax": "<pre>splice(<kbd>list</kbd>, <kbd>value</kbd>, <kbd>index</kbd>)</pre>", "params": ["list", "value", "index"]},
{"category": "Data", "name": "reverse()", "syntax": "<pre>reverse(<kbd>list</kbd>)</pre>", "params": ["list"]},
{"category": "Data", "name": "sort()", "syntax": "<pre>sort(<kbd>list</kbd>)\nsort(<kbd>list</kbd>, <kbd>count</kbd>)</pre>", "params": ["list", "count"]},
{"category": "Data", "name": "expand()", "syntax": "<pre>expand(<kbd>list</kbd>)\nexpand(<kbd>list</kbd>, <kbd>newSize</kbd>)</pre>", "params": ["list", "newSize"]},
{"category": "Data", "name": "shorten()", "syntax": "<pre>shorten(<kbd>list</kbd>)</pre>", "params": ["list"]},
{"category": "Data", "name": "concat()", "syntax": "<pre>concat(<kbd>a</kbd>, <kbd>b</kbd>)</pre>", "params": ["a", "b"]},
{"category": "Data", "name": "arrayCopy()", "syntax": "<pre>arrayCopy(<kbd>src</kbd>, <kbd>srcPosition</kbd>, <kbd>dst</kbd>, <kbd>dstPosition</kbd>, <kbd>length</kbd>)\narrayCopy(<kbd>src</kbd>, <kbd>dst</kbd>, <kbd>length</kbd>)\narrayCopy(<kbd>src</kbd>, <kbd>dst</kbd>)</pre>", "params": ["src", "srcPosition", "dst", "dstPosition", "length"]},
{"category": "Data", "name": "append()", "syntax": "<pre>append(<kbd>array</kbd>, <kbd>value</kbd>)</pre>", "params": ["array", "value"]},
{"category": "Data", "name": "trim()", "syntax": "<pre>trim(<kbd>str</kbd>)\ntrim(<kbd>array</kbd>)</pre>", "params": ["str", "array"]},
{"category": "Data", "name": "split()", "syntax": "<pre>split(<kbd>value</kbd>, <kbd>delim</kbd>)</pre>", "params": ["value", "delim"]},
{"category": "Data", "name": "splitTokens()", "syntax": "<pre>splitTokens(<kbd>value</kbd>)\nsplitTokens(<kbd>value</kbd>, <kbd>delim</kbd>)</pre>", "params": ["value", "delim"]},
{"category": "Data", "name": "nfs()", "syntax": "<pre>nfs(<kbd>num</kbd>, <kbd>digits</kbd>)\nnfs(<kbd>nums</kbd>, <kbd>digits</kbd>)\nnfs(<kbd>nums</kbd>, <kbd>left</kbd>, <kbd>right</kbd>)\nnfs(<kbd>num</kbd>, <kbd>left</kbd>, <kbd>right</kbd>)</pre>", "params": ["num", "digits", "nums", "left", "right"]},
{"category": "Data", "name": "nfp()", "syntax": "<pre>nfp(<kbd>num</kbd>, <kbd>digits</kbd>)\nnfp(<kbd>nums</kbd>, <kbd>digits</kbd>)\nnfp(<kbd>nums</kbd>, <kbd>left</kbd>, <kbd>right</kbd>)\nnfp(<kbd>num</kbd>, <kbd>left</kbd>, <kbd>right</kbd>)</pre>", "params": ["num", "digits", "nums", "left", "right"]},
{"category": "Data", "name": "nf()", "syntax": "<pre>nf(<kbd>num</kbd>)\nnf(<kbd>nums</kbd>)\nnf(<kbd>nums</kbd>, <kbd>digits</kbd>)\nnf(<kbd>num</kbd>, <kbd>digits</kbd>)\nnf(<kbd>nums</kbd>, <kbd>left</kbd>, <kbd>right</kbd>)\nnf(<kbd>num</kbd>, <kbd>left</kbd>, <kbd>right</kbd>)</pre>", "params": ["nums", "digits", "num", "left", "right"]},
{"category": "Data", "name": "nfc()", "syntax": "<pre>nfc(<kbd>nums</kbd>)\nnfc(<kbd>num</kbd>)\nnfc(<kbd>nums</kbd>, <kbd>right</kbd>)\nnfc(<kbd>num</kbd>, <kbd>right</kbd>)</pre>", "params": ["nums", "num", "right"]},
{"category": "Data", "name": "matchAll()", "syntax": "<pre>matchAll(<kbd>str</kbd>, <kbd>regexp</kbd>)</pre>", "params": ["str", "regexp"]},
{"category": "Data", "name": "join()", "syntax": "<pre>join(<kbd>list</kbd>, <kbd>separator</kbd>)</pre>", "params": ["list", "separator"]},
{"category": "Data", "name": "float()", "syntax": "<pre>join(<kbd>list</kbd>, <kbd>separator</kbd>)</pre>", "params": ["list", "separator"]},
{"category": "Data", "name": "unhex()", "syntax": "<pre>unhex(<kbd>value</kbd>)</pre>", "params": ["value"]},
{"category": "Data", "name": "int()", "syntax": "<pre>unhex(<kbd>value</kbd>)</pre>", "params": ["value"]},
{"category": "Data", "name": "unbinary()", "syntax": "<pre>unbinary(<kbd>value</kbd>)</pre>", "params": ["value"]},
{"category": "Data", "name": "str()", "syntax": "<pre>unbinary(<kbd>value</kbd>)</pre>", "params": ["value"]},
{"category": "Data", "name": "hex()", "syntax": "<pre>hex(<kbd>value</kbd>)\nhex(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["value", "digits"]},
{"category": "Data", "name": "match()", "syntax": "<pre>match(<kbd>str</kbd>, <kbd>regexp</kbd>)</pre>", "params": ["str", "regexp"]},
{"category": "Data", "name": "StringList", "syntax": "<pre>match(<kbd>str</kbd>, <kbd>regexp</kbd>)</pre>", "params": ["str", "regexp"]},
{"category": "Data", "name": "StringDict", "syntax": "<pre>match(<kbd>str</kbd>, <kbd>regexp</kbd>)</pre>", "params": ["str", "regexp"]},
{"category": "Data", "name": "byte()", "syntax": "<pre>match(<kbd>str</kbd>, <kbd>regexp</kbd>)</pre>", "params": ["str", "regexp"]},
{"category": "Data", "name": "Table", "syntax": "<pre>match(<kbd>str</kbd>, <kbd>regexp</kbd>)</pre>", "params": ["str", "regexp"]},
{"category": "Data", "name": "binary()", "syntax": "<pre>binary(<kbd>value</kbd>)\nbinary(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["value", "digits"]},
{"category": "Data", "name": "boolean()", "syntax": "<pre>binary(<kbd>value</kbd>)\nbinary(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["value", "digits"]},
{"category": "Data", "name": "String", "syntax": "<pre>binary(<kbd>value</kbd>)\nbinary(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["data", "offset", "length"]},
{"category": "Data", "name": "TableRow", "syntax": "<pre>binary(<kbd>value</kbd>)\nbinary(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["data", "offset", "length"]},
{"category": "Data", "name": "char()", "syntax": "<pre>binary(<kbd>value</kbd>)\nbinary(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["data", "offset", "length"]},
{"category": "Data", "name": "XML", "syntax": "<pre>binary(<kbd>value</kbd>)\nbinary(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["name"]},
{"category": "Data", "name": "JSONObject", "syntax": "<pre>binary(<kbd>value</kbd>)\nbinary(<kbd>value</kbd>, <kbd>digits</kbd>)</pre>", "params": ["name"]},
{"category": "Data", "name": "Object", "syntax": "<pre>\nClassName instanceName\n</pre>", "params": ["ClassName", "instanceName"]},
{"category": "Data", "name": "JSONArray", "syntax": "<pre>\nClassName instanceName\n</pre>", "params": ["ClassName", "instanceName"]},
{"category": "Data", "name": "IntList", "syntax": "<pre>\nClassName instanceName\n</pre>", "params": ["ClassName", "instanceName"]},
{"category": "Data", "name": "IntDict", "syntax": "<pre>\nClassName instanceName\n</pre>", "params": ["ClassName", "instanceName"]},
{"category": "Data", "name": "FloatList", "syntax": "<pre>\nClassName instanceName\n</pre>", "params": ["ClassName", "instanceName"]},
{"category": "Data", "name": "FloatDict", "syntax": "<pre>\nClassName instanceName\n</pre>", "params": ["ClassName", "instanceName"]},
{"category": "Data", "name": "HashMap", "syntax": "<pre>\nClassName instanceName\n</pre>", "params": ["Key", "Value", "initialCapacity", "loadFactor", "m"]},
{"category": "Data", "name": "Array", "syntax": "<pre>\ndatatype[] var\nvar[element] = value\nvar.length\n</pre>", "params": ["datatype", "var", "element", "value"]},
{"category": "Data", "name": "long", "syntax": "<pre>\nlong var\nlong var = value\n</pre>", "params": ["var", "value"]},
{"category": "Data", "name": "ArrayList", "syntax": "<pre>\nlong var\nlong var = value\n</pre>", "params": ["Type", "initialCapacity"]},
{"category": "Data", "name": "float", "syntax": "<pre>\nfloat var\nfloat var = value\n</pre>", "params": ["var", "value"]},
{"category": "Data", "name": "double", "syntax": "<pre>\ndouble var\ndouble var = value\n</pre>", "params": ["var", "value"]},
{"category": "Data", "name": "int", "syntax": "<pre>\nint var\nint var = value\n</pre>", "params": ["var", "value"]},
{"category": "Data", "name": "color", "syntax": "<pre>\nint var\nint var = value\n</pre>", "params": ["var", "value"]},
{"category": "Data", "name": "char", "syntax": "<pre>\nchar var\nchar var = value\n</pre>", "params": ["var", "value"]},
{"category": "Data", "name": "byte", "syntax": "<pre>\nbyte var\nbyte var = value\n</pre>", "params": ["var", "value"]},
{"category": "Data", "name": "boolean", "syntax": "<pre>\nboolean var\nboolean var = booleanvalue\n</pre>", "params": ["var", "booleanvalue"]},
{"category": "Environment", "name": "width", "syntax": "<pre>\nboolean var\nboolean var = booleanvalue\n</pre>", "params": ["var", "booleanvalue"]},
{"category": "Environment", "name": "smooth()", "syntax": "<pre>smooth(<kbd>level</kbd>)</pre>", "params": ["level"]},
{"category": "Environment", "name": "settings()", "syntax": "<pre>settings()</pre>", "params": ["level"]},
{"category": "Environment", "name": "size()", "syntax": "<pre>size(<kbd>width</kbd>, <kbd>height</kbd>)\nsize(<kbd>width</kbd>, <kbd>height</kbd>, <kbd>renderer</kbd>)</pre>", "params": ["width", "height"]},
{"category": "Environment", "name": "pixelWidth", "syntax": "<pre>size(<kbd>width</kbd>, <kbd>height</kbd>)\nsize(<kbd>width</kbd>, <kbd>height</kbd>, <kbd>renderer</kbd>)</pre>", "params": ["width", "height"]},
{"category": "Environment", "name": "pixelHeight", "syntax": "<pre>size(<kbd>width</kbd>, <kbd>height</kbd>)\nsize(<kbd>width</kbd>, <kbd>height</kbd>, <kbd>renderer</kbd>)</pre>", "params": ["width", "height"]},
{"category": "Environment", "name": "pixelDensity()", "syntax": "<pre>pixelDensity(<kbd>density</kbd>)</pre>", "params": ["density"]},
{"category": "Environment", "name": "noSmooth()", "syntax": "<pre>noSmooth()</pre>", "params": ["density"]},
{"category": "Environment", "name": "noCursor()", "syntax": "<pre>noCursor()</pre>", "params": ["density"]},
{"category": "Environment", "name": "height", "syntax": "<pre>noCursor()</pre>", "params": ["density"]},
{"category": "Environment", "name": "frameRate", "syntax": "<pre>noCursor()</pre>", "params": ["density"]},
{"category": "Structure", "name": "setLocation()", "syntax": "<pre>\nsurface.setLocation(x, y)\n</pre>", "params": ["x", "y"]},
{"category": "Structure", "name": "return", "syntax": "<pre>\n<c>type</c> <c>function</c> {\n  <c>statements</c>\n  return <c>value</c>\n}\n</pre>", "params": ["type", "function", "statements", "value"]},
{"category": "Environment", "name": "fullScreen()", "syntax": "<pre>fullScreen()\nfullScreen(<kbd>display</kbd>)\nfullScreen(<kbd>renderer</kbd>)\nfullScreen(<kbd>renderer</kbd>, <kbd>display</kbd>)</pre>", "params": ["renderer", "display"]},
{"category": "Structure", "name": "redraw()", "syntax": "<pre>redraw()</pre>", "params": ["renderer", "display"]},
{"category": "Environment", "name": "frameRate()", "syntax": "<pre>frameRate(<kbd>fps</kbd>)</pre>", "params": ["fps"]},
{"category": "Structure", "name": "pushStyle()", "syntax": "<pre>pushStyle()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "push()", "syntax": "<pre>push()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "public", "syntax": "<pre>push()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "null", "syntax": "<pre>push()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "new", "syntax": "<pre>push()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "popStyle()", "syntax": "<pre>popStyle()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "pop()", "syntax": "<pre>pop()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "loop()", "syntax": "<pre>loop()</pre>", "params": ["fps"]},
{"category": "Structure", "name": "import", "syntax": "<pre>\nimport libraryName\n</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "noLoop()", "syntax": "<pre>noLoop()</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "implements", "syntax": "<pre>noLoop()</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "final", "syntax": "<pre>noLoop()</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "false", "syntax": "<pre>noLoop()</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "extends", "syntax": "<pre>noLoop()</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "exit()", "syntax": "<pre>exit()</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "draw()", "syntax": "<pre>draw()</pre>", "params": ["libraryName"]},
{"category": "Structure", "name": "class", "syntax": "<pre>\nclass ClassName {\n  statements\n}\n</pre>", "params": ["ClassName", "statements"]},
{"category": "Structure", "name": "catch", "syntax": "<pre>\ntry {\n  tryStatements\n} catch (exception) {\n  catchStatements\n} \n</pre>", "params": ["tryStatements", "exception", "catchStatements"]},
{"category": "Structure", "name": "{} (curly braces)", "syntax": "<pre>\n{ statements }\n{ ele0, ..., eleN }\n</pre>", "params": ["statements", "ele0, ..., eleN"]},
{"category": "Structure", "name": "[] (array access)", "syntax": "<pre>\ndatatype[]\narray[element]\n</pre>", "params": ["datatype", "array", "element"]},
{"category": "Structure", "name": "= (assign)", "syntax": "<pre>\nvar = value\n</pre>", "params": ["var", "value"]},
{"category": "Structure", "name": "; (semicolon)", "syntax": "<pre>\nstatement;\n</pre>", "params": ["statement"]},
{"category": "Structure", "name": "// (comment)", "syntax": "<pre>\n// comment\n</pre>", "params": ["comment"]},
{"category": "Structure", "name": "/** */ (doc comment)", "syntax": "<pre>\n/**\n  comment\n*/\n</pre>", "params": ["comment"]},
{"category": "Structure", "name": ", (comma)", "syntax": "<pre>\nvalue1, ..., valueN\n</pre>", "params": ["value1, ..., valueN"]},
{"category": "Structure", "name": "/* */ (multiline comment)", "syntax": "<pre>\n/*\n  comment\n*/\n</pre>", "params": ["comment"]},
{"category": "Structure", "name": ". (dot)", "syntax": "<pre>\nobject.method()\nobject.data\n</pre>", "params": ["object", "method()", "data"]},
{"category": "Structure", "name": "private", "syntax": "<pre>\nobject.method()\nobject.data\n</pre>", "params": ["object", "method()", "data"]}
]